(in-microtheory UnoPlayer)


;;;;;;;;;;;;;;;;;;;;;;;;;;; Planning ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;; opponent drew card

;; usage: (opponentDrewCard ?opponent ?quantity)

;;if 1 card was drawn, it means they couldn't play with their hand
(preconditionForMethod
    (and
        (equals ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (UpdateColorPreferencesDrewCard ?opponent)
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))

;;if 2 or more cards were drawn, they got a draw +2 or +4
(preconditionForMethod
    (and
        (greaterThan ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))


;; opponent drew and played
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentDrewAndPlayed ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    ()))))) ;;; what happens??

;;;;;;;;;;;;;;;;;;; self drew card
;; update in hand state
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfDrewCard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card unseenCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card inHandCard)))))))

;;;;;;;;;;;;;;;;;;; Played a Card
;; opponent played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentPlayedCard ?card)
        (actionSequence
            (TheList
                (doAgentPlan
                    (DecreaseOpponentHandSize ?opponent 1)
                    (UpdateColorPreferencesPlayedCard ?opponent ?card))))))

;; self played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfPlayedCard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card inHandCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card discardedCard)))))))

;; ------------------------------------------------------------
;; -------------------- Update Color Preferences --------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
       	(getTopCardFn ?topCard)
        (isa ?topCard RedPlayingCard))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    	  (getTopCardFn ?topCard)
        (isa ?topCard BluePlayingCard))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))


(preconditionForMethod
    (and
   		  (getTopCardFn ?topCard)
        (isa ?topCard GreenPlayingCard))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    		(getTopCardFn ?topCard)
        (isa ?topCard YellowPlayingCard))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?pref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoAvoid)))))))

(preconditionForMethod
    (and
        (isa ?card ?cardColor))
    (methodForAction
        (UpdateColorPreferencesPlayedCard ?opponent ?card)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoPreferred)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoNeutral)))))))


;; ------------------------------------------------------------
;; -------------------- Update Opponent Hand Size --------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
       	(true))
    (methodForAction
        (IncreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent (plusFn ?quantity ?currentSize))))))))

(preconditionForMethod
    (and
        (true))
    (methodForAction
        (DecreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent (minusFn ?quantity ?currentSize))))))))
