(in-microtheory UnoPlayer)


;;;;;;;;;;;;;;;;;;;;;;;;;;; Planning ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;; opponent drew card

;; usage: (opponentDrewCard ?opponent ?quantity)

;;if 1 card was drawn, it means they couldn't play with their hand
(preconditionForMethod
    (and
        (equals ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (UpdateColorPreferencesDrewCard ?opponent))
                (doAgentPlan
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))

;;if 2 or more cards were drawn, they got a draw +2 or +4
(preconditionForMethod
    (and
        (greaterThan ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))


;; opponent drew and played
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentDrewAndPlayed ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    ()))))) ;;; what happens??

;;;;;;;;;;;;;;;;;;; self drew card
;; update in hand state
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfDrewCard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card unseenCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card inHandCard)))))))

;;;;;;;;;;;;;;;;;;; Played a Card
;; opponent played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentPlayedCard ?opponent ?card)
        (actionSequence
            (TheList
                (doAgentPlan
                    (DecreaseOpponentHandSize ?opponent 1))
                (doAgentPlan
                    (UpdateColorPreferencesPlayedCard ?opponent ?card))))))

;; opponent played wild card and requested a color
(preconditionForMethod
    (and
        (isa ?color ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (isa ?wildColorCard WildColor)
        (isa ?wildColorCard ?cardColor))
    (methodForAction
        (opponentPlayedWildCard ?opponent ?color)
        (actionSequence
            (TheList
                (doAgentPlan
                    (DecreaseOpponentHandSize ?opponent 1))
                (doAgentPlan
                    (UpdateColorPreferencesPlayedWildCard ?opponent ?wildColorCard))
                (doAgentPlan
                    (UpdateTopCard ?wildColorCard))))))


;; self played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfPlayedCard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card inHandCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card discardedCard)))))))

;; ------------------------------------------------------------
;; -------------------- Update Color Preferences --------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
       	(getTopCardFn ?topCard)
        (isa ?topCard RedPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    	  (getTopCardFn ?topCard)
        (isa ?topCard BluePlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))


(preconditionForMethod
    (and
   		  (getTopCardFn ?topCard)
        (isa ?topCard GreenPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    		(getTopCardFn ?topCard)
        (isa ?topCard YellowPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoAvoid)))))))

(preconditionForMethod
    (and
        (isa ?card ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (colorPreference ?opponent ?cardColor ?pref))
    (methodForAction
        (UpdateColorPreferencesPlayedCard ?opponent ?card)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoNeutral)))))))

(preconditionForMethod
    (and
        (isa ?wildCardColor ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (colorPreference ?opponent ?cardColor ?pref))
    (methodForAction
        (UpdateColorPreferencesPlayedWildCard ?opponent ?wildCardColor)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoPreferred)))))))


;; ------------------------------------------------------------
;; -------------------- Update Opponent Hand Size -------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (opponentHandSize ?opponent ?currentSize)
       	(evaluate ?newSize (PlusFn ?quantity ?currentSize)))
    (methodForAction
        (IncreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent ?newSize)))))))

(preconditionForMethod
    (and
        (opponentHandSize ?opponent ?currentSize)
        (evaluate ?newSize (DifferenceFn ?currentSize ?quantity)))
    (methodForAction
        (DecreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent ?newSize)))))))

;; ------------------------------------------------------------
;; -------------------- Update Top Card -----------------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (getTopCardFn ?topCard))
    (methodForAction
        (UpdateTopCard ?card)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (topCard ?topCard))) ;;;;;;;;;;;;;;;;;;;;;;;;;;;; TODO
              (doRecord (ist-Information UnoPlayer (topCard ?card))))))) ;;;;;;;;;;;;;;;;;;;;;;;;;;; TODO
