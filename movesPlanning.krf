(in-microtheory UnoPlayer)
(genlMt Session-ReasonerPlanMt UnoPlayer)


;;;;;;;;;;;;;;;;;;;;;;;;;;; Planning ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;; opponent drew card

;; usage: (opponentDrewCard ?opponent ?quantity)

;;if 1 card was drawn, it means they couldn't play with their hand
(preconditionForMethod
    (and
        (equals ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (UpdateColorPreferencesDrewCard ?opponent))
                (doAgentPlan
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))

;;if 2 or more cards were drawn, they got a draw +2 or +4
(preconditionForMethod
    (and
        (greaterThan ?quantity 1))
    (methodForAction
        (opponentDrewCard ?opponent ?quantity)
        (actionSequence
            (TheList
                (doAgentPlan
                    (IncreaseOpponentHandSize ?opponent ?quantity))))))


;; opponent drew and played
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentDrewAndPlayed ?opponent ?card)
        (actionSequence
            (TheList
                (doAgentPlan
                    (UpdateColorPreferencesDrewCard ?opponent))
                (doAgentPlan
                    (UpdateTopCard ?card))))))

;;;;;;;;;;;;;;;;;;; Self drew card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfDrewCard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card unseenCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card inHandCard)))))))

;;;;;;;;;;;;;;;;;;; Played a Card
;; opponent played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (opponentPlayedCard ?opponent ?card)
        (actionSequence
            (TheList
                (doAgentPlan
                    (DecreaseOpponentHandSize ?opponent 1))
                (doAgentPlan
                    (UpdateColorPreferencesPlayedCard ?opponent ?card))
                (doAgentPlan
                    (UpdateTopCard ?card))))))

;; opponent played reverse card 
(preconditionForMethod
    (and
        (isa ?card ReverseTheCard))
    (methodForAction
        (opponentPlayedReverseCard ?opponent ?card)
        (actionSequence
            (TheList
                (doAgentPlan
                    (opponentPlayedCard ?opponent ?card))
                (doAgentPlan
                    (UpdateDirection))))))




;; opponent played wild card and requested a color
(preconditionForMethod
    (and
        (isa ?wildColorCard WildTheCard)
        (isa ?wildColorCard ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (equals ?color ?cardColor))
    (methodForAction
        (opponentPlayedWildCard ?opponent ?color)
        (actionSequence
            (TheList
                (doAgentPlan
                    (DecreaseOpponentHandSize ?opponent 1))
                (doAgentPlan
                    (UpdateColorPreferencesPlayedWildCard ?opponent ?wildColorCard))
                (doAgentPlan
                    (UpdateTopCard ?wildColorCard))))))


;; self played card
(preconditionForMethod
    (and
        (true))
    (methodForAction
        (selfPlayedCard ?card)
        (actionSequence
            (TheList
                (doAgentPlan (Discard ?card))
                (doAgentPlan (UpdateTopCard ?card))))))

(preconditionForMethod
    (and
        (true))
    (methodForAction
        (Discard ?card)
        (actionSequence
            (TheList
                (doForget (ist-Information UnoPlayer (cardState ?card inHandCard)))
                (doRecord (ist-Information UnoPlayer (cardState ?card discardedCard)))))))

;; ------------------------------------------------------------
;; -------------------- Update Color Preferences --------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
       	(getTopCard gameState ?topCard)
        (isa ?topCard RedPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    	(getTopCard gameState ?topCard)
        (isa ?topCard BluePlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))


(preconditionForMethod
    (and
   		(getTopCard gameState ?topCard)
        (isa ?topCard GreenPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoAvoid)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoNeutral)))))))

(preconditionForMethod
    (and
    	(getTopCard gameState ?topCard)
        (isa ?topCard YellowPlayingCard)
        (colorPreference ?opponent RedPlayingCard ?redPref)
        (colorPreference ?opponent BluePlayingCard ?bluePref)
        (colorPreference ?opponent GreenPlayingCard ?greenPref)
        (colorPreference ?opponent YellowPlayingCard ?yellowPref))
    (methodForAction
        (UpdateColorPreferencesDrewCard ?opponent)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard ?redPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard ?bluePref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard ?greenPref)))
              (doForget (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard ?yellowPref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent RedPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent BluePlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent GreenPlayingCard unoNeutral)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent YellowPlayingCard unoAvoid)))))))

(preconditionForMethod
    (and
        (isa ?card ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (colorPreference ?opponent ?cardColor ?pref))
    (methodForAction
        (UpdateColorPreferencesPlayedCard ?opponent ?card)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoNeutral)))))))

(preconditionForMethod
    (and
        (isa ?wildCardColor ?cardColor)
        (isa ?cardColor PlayingCardColor)
        (colorPreference ?opponent ?cardColor ?pref))
    (methodForAction
        (UpdateColorPreferencesPlayedWildCard ?opponent ?wildCardColor)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor ?pref)))
              (doRecord (ist-Information UnoPlayer (colorPreference ?opponent ?cardColor unoPreferred)))))))


;; ------------------------------------------------------------
;; -------------------- Update Opponent Hand Size -------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (opponentHandSize ?opponent ?currentSize)
       	(evaluate ?newSize (PlusFn ?quantity ?currentSize)))
    (methodForAction
        (IncreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent ?newSize)))))))

(preconditionForMethod
    (and
        (opponentHandSize ?opponent ?currentSize)
        (evaluate ?newSize (DifferenceFn ?currentSize ?quantity)))
    (methodForAction
        (DecreaseOpponentHandSize ?opponent ?quantity)
        (actionSequence
            (TheList
            	(doForget (ist-Information UnoPlayer (opponentHandSize ?opponent ?currentSize)))
              (doRecord (ist-Information UnoPlayer (opponentHandSize ?opponent ?newSize)))))))

;; ------------------------------------------------------------
;; -------------------- Change Top Card -----------------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (getTopCard gameState ?topCard))
    (methodForAction
        (UpdateTopCard ?card)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (getTopCard gameState ?topCard)))
              (doRecord (ist-Information UnoPlayer (getTopCard gameState ?card)))))))

;; ------------------------------------------------------------
;; -------------------- Change Direction ----------------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (gameDirection gameState ?direction)
        (opposite ?direction ?oppositeDirection))
    (methodForAction
        (UpdateDirection)
        (actionSequence
            (TheList
              (doForget (ist-Information UnoPlayer (gameDirection gameState ?direction)))
              (doRecord (ist-Information UnoPlayer (gameDirection gameState ?oppositeDirection)))))))




;; ------------------------------------------------------------
;; -------------------- Initialize Game -----------------------
;; ------------------------------------------------------------

(preconditionForMethod
    (and
        (true))
    (methodForAction
        (InitializeGame ?topCard ?card1 ?card2 ?card3 ?card4 ?card5 ?card6 ?card7)
        (actionSequence
            (TheList
              (doRecord (ist-Information UnoPlayer (getTopCard gameState ?topCard)))
              (doForget (ist-Information UnoPlayer (cardState ?topCard unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card1 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card2 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card3 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card4 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card5 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card6 unseenCard)))
              (doForget (ist-Information UnoPlayer (cardState ?card7 unseenCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?topCard discardedCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card1 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card2 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card3 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card4 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card5 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card6 inHandCard)))
              (doRecord (ist-Information UnoPlayer (cardState ?card7 inHandCard)))))))
