(in-microtheory UnoPlayer)
(genlMt Session-ReasonerPlanMt UnoPlayer)


;; ------------------------------------------------------------
;; ----------------------- Late Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (endGame) returns true

;; Draw 4s
;; Wilds
;; Draw 2s
;; Skip (unless second player across is only late game) and you have a reverse
;; Reverse
;; Switch color away from winning player's preferences
;; Play highest numeric card

(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?playableCards ?topCard))
    (methodForAction
        (cardToPlay)
        (actionSequence
          (TheList
            (doAgentPlan
              (cardToPlayHelper ?currCard ?topCard ?playableCards))))))

;; Draw 4
(preconditionForMethod
    (and
        (isa ?playableCards WildDraw4TheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Wild
;; returns generic wild card color to indicate color to change to
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (isa ?playableCards WildTheCard)
        (pickWildCardColorEarlyGame ?color) ;; TODO: change to late game strategy
        (isa ?newCard WildTheCard)
        (isa ?newCard ?color))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; Draw 2
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (isa ?playableCards Draw2TheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Reverse if opponent2 is close to winning
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (uninferredSentence (isa ?playableCards Draw2TheCard))
        (isa ?playableCards ReverseTheCard)
        (opponentHandSize opponent2 ?size)
        (evaluate True (lessThan ?size 4)))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Skip
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (uninferredSentence (isa ?playableCards Draw2TheCard))
        (isa ?playableCards SkipTheCard)
        (opponentHandSize opponent2 ?size)
        (evaluate True (greaterThan ?size 4)))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Reverse
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (uninferredSentence (isa ?playableCards Draw2TheCard))
        (uninferredSentence (isa ?playableCards SkipTheCard))
        (isa ?playableCards ReverseTheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Switch color away from opponent preferences
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (uninferredSentence (isa ?playableCards Draw2TheCard))
        (uninferredSentence (isa ?playableCards SkipTheCard))
        (uninferredSentence (isa ?playableCards ReverseTheCard))
        (changeColorByOpponentPreference ?newColor) ;; TODO: write a function to do this
        (isa ?playableCards ?newColor))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Highest numeric card
(preconditionForMethod
    (and
        (uninferredSentence (isa ?playableCards WildDraw4TheCard))
        (uninferredSentence (isa ?playableCards WildTheCard))
        (uninferredSentence (isa ?playableCards Draw2TheCard))
        (uninferredSentence (isa ?playableCards SkipTheCard))
        (uninferredSentence (isa ?playableCards ReverseTheCard))
        (highestValuePlayableCard ?newCard ?topCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard ?playableCards)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; ------------------------------------------------------------
;; ----------------------- Early Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (earlyGame) returns true

;; Skips and reverses
;; Color you have more of
;; Highest numeric card
;; Draw 2s
;; Wilds
;; Draw 4s
