(in-microtheory UnoPlayer)
(genlMt Session-ReasonerPlanMt UnoPlayer)


;; ------------------------------------------------------------
;; ----------------------- Late Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (endGame) returns true

;; Draw 4s
;; Wilds
;; Draw 2s
;; Skip (unless second player across is only late game) and you have a reverse
;; Reverse
;; Switch color away from winning player's preferences
;; Play highest numeric card

;; Draw 4
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (isa ?cards WildDraw4TheCard))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Wild
;; returns generic wild card color to indicate color to change to
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (isa ?cards WildTheCard)
        (pickWildCardColorEarlyGame ?color) ;; TODO: change to late game strategy
        (isa ?newCard WildTheCard)
        (isa ?newCard ?color))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; Draw 2
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (isa ?cards Draw2TheCard))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Reverse if opponent2 is close to winning
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (not (isa ?cards Draw2TheCard))
        (isa ?cards ReverseTheCard)
        (opponentHandSize opponent2 ?size)
        (evaluate True (lessThan ?size 4)))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Skip
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (not (isa ?cards Draw2TheCard))
        (isa ?cards SkipTheCard)
        (opponentHandSize opponent2 ?size)
        (evaluate True (greaterThan ?size 4)))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Reverse
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (not (isa ?cards Draw2TheCard))
        (not (isa ?cards SkipTheCard))
        (isa ?cards ReverseTheCard))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Switch color away from opponent preferences
(preconditionForMethod
    (and
    	  (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (not (isa ?cards Draw2TheCard))
        (not (isa ?cards SkipTheCard))
        (not (isa ?cards ReverseTheCard))
        (changeColorByOpponentPreference ?newColor) ;; TODO: write a function to do this
        (isa ?cards ?newColor))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?cards)))))))

;; Highest numeric card
(preconditionForMethod
    (and
        (endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (playableCards ?cards ?topCard)
        (not (isa ?cards WildDraw4TheCard))
        (not (isa ?cards WildTheCard))
        (not (isa ?cards Draw2TheCard))
        (not (isa ?cards SkipTheCard))
        (not (isa ?cards ReverseTheCard))
        (highestValuePlayableCard ?newCard ?topCard))
    (methodForAction
        (cardToPlay)
        (actionSequence
            (TheList
                (doForget (ist-Information MyNextMoveMt (nextMove ?currCard)))
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; ------------------------------------------------------------
;; ----------------------- Early Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (earlyGame) returns true

;; Skips and reverses
;; Color you have more of
;; Highest numeric card
;; Draw 2s
;; Wilds
;; Draw 4s
