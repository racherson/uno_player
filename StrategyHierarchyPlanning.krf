(in-microtheory UnoPlayer)
(genlMt Session-ReasonerPlanMt UnoPlayer)


;; ------------------------------------------------------------
;; ----------------------- Late Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (endGame) returns true

;; Draw 4s
;; Wilds
;; Draw 2s
;; Skip (unless second player across is only late game) and you have a reverse
;; Reverse
;; Switch color away from winning player's preferences
;; Play highest numeric card


(preconditionForMethod
    (and
    	(endGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (evaluate ?oldPlayableCardList
            (TheClosedRetrievalSetOf ?oldPlayableCard
                (cardState ?oldPlayableCard playableCard)))
        (evaluate ?playableCardList
            (TheClosedRetrievalSetOf ?playableCards
                (playableCards ?playableCards ?topCard)))
        (evaluate ?nextMoveList
            (TheClosedRetrievalSetOf ?nextMove
                (nextMove ?nextMove))))
    (methodForAction
        (cardToPlay)
        (actionSequence
          (TheList
            (doForEach ?oldPlayableCard ?oldPlayableCardList
                (doForget (ist-Information UnoPlayer (cardState ?oldPlayableCard playableCard))))
            (doForEach ?nextMove ?nextMoveList
                (doForget (ist-Information MyNextMoveMt (nextMove ?nextMove))))
            (doForEach ?playableCard ?playableCardList
                (doRecord (ist-Information UnoPlayer (cardState ?playableCard playableCard))))
            (doAgentPlan
              (cardToPlayHelper ?currCard ?topCard))))))

;; Draw 4
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (isa ?playableCards WildDraw4TheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Wild
;; returns generic wild card color to indicate color to change to
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (isa ?playableCards WildTheCard)
        (pickWildCardColorLateGame ?color) ;; TODO: change to late game strategy
        (isa ?newCard WildTheCard)
        (isa ?newCard ?color))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; Draw 2
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (isa ?playableCards Draw2TheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Reverse if opponent2 is close to winning
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (isa ?playableCards ReverseTheCard)
        (opponentHandSize opponent2 ?size)
        (lessThan ?size 4))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Skip and reverse
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (isa ?playableCards SkipTheCard)
        (opponentHandSize opponent2 ?size)
        (greaterThan ?size 3))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Skip only
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (typeIsNotPlayable ReverseTheCard)
        (isa ?playableCards SkipTheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Reverse
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (typeIsNotPlayable SkipTheCard)
        (isa ?playableCards ReverseTheCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Switch color away from opponent preferences
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (changeColorByOpponentPreference ?newColor) ;; TODO: write a function to do this
        (isa ?playableCards ?newColor))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Highest numeric card
(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable WildDraw4TheCard)
        (typeIsNotPlayable WildTheCard)
        (typeIsNotPlayable Draw2TheCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (highestValuePlayableCard ?newCard ?topCard))
    (methodForAction
        (cardToPlayHelper ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; ------------------------------------------------------------
;; ----------------------- Early Game Hierarchy ----------------
;; ------------------------------------------------------------
;; planning to be done if (earlyGame) returns true

;; Skips and reverses
;; Highest numeric card
;; Draw 2s
;; Wilds
;; Draw 4s

(preconditionForMethod
    (and
    	(earlyGame)
        (nextMove ?currCard)
        (getTopCard gameState ?topCard)
        (evaluate ?oldPlayableCardList
            (TheClosedRetrievalSetOf ?oldPlayableCard
                (cardState ?oldPlayableCard playableCard)))
        (evaluate ?playableCardList
            (TheClosedRetrievalSetOf ?playableCards
                (playableCards ?playableCards ?topCard)))
        (evaluate ?nextMoveList
            (TheClosedRetrievalSetOf ?nextMove
                (nextMove ?nextMove))))
    (methodForAction
        (cardToPlay)
        (actionSequence
          (TheList
            (doForEach ?oldPlayableCard ?oldPlayableCardList
                (doForget (ist-Information UnoPlayer (cardState ?oldPlayableCard playableCard))))
            (doForEach ?nextMove ?nextMoveList
                (doForget (ist-Information MyNextMoveMt (nextMove ?nextMove))))
            (doForEach ?playableCard ?playableCardList
                (doRecord (ist-Information UnoPlayer (cardState ?playableCard playableCard))))
            (doAgentPlan
              (cardToPlayHelperEarly ?currCard ?topCard))))))


;; Skips

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (isa ?playableCards SkipTheCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))


;; Reverses

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable SkipTheCard)
        (isa ?playableCards ReverseTheCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Highest numeric card

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (highestValuePlayableCard ?newCard ?topCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?newCard)))))))

;; Draw 2s

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (typeIsNotPlayable NumericCard)
        (isa ?playableCards Draw2TheCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Wilds

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (typeIsNotPlayable NumericCard)
        (typeIsNotPlayable Draw2TheCard)
        (isa ?playableCards WildTheCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))

;; Draw 4s

(preconditionForMethod
    (and
        (cardState ?playableCards playableCard)
        (typeIsNotPlayable SkipTheCard)
        (typeIsNotPlayable ReverseTheCard)
        (typeIsNotPlayable NumericCard)
        (typeIsNotPlayable Draw2TheCard)
        (isa ?playableCards WildDraw4TheCard))
    (methodForAction
        (cardToPlayHelperEarly ?currCard ?topCard)
        (actionSequence
            (TheList
                (doRecord (ist-Information MyNextMoveMt (nextMove ?playableCards)))))))
