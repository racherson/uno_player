(in-microtheory UnoPlayer)

;; ------------------------------------------------------------
;; -------------------- Helper functions ----------------------
;; ------------------------------------------------------------

;; ************ cardColor ***********
;; Get the color of a card
(<== (cardColor ?card ?color)
    (isa ?card ?color)
    (isa ?color PlayingCardColor))

;; ************ sameColor ***********
;; Compare two cards to determine if they're the same color
(<== (sameColor ?card1 ?card2)
    (isa ?card1 ?cardColor)
    (isa ?cardColor PlayingCardColor)
    (isa ?card2 ?cardColor))

;; ************ matchingCards ***********
;; Compare two cards to determine if they match symbols or colors

;; check for matching colors
(<== (matchingCards ?card1 ?card2)
    (isa ?card1 ?number)
    (isa ?number NumberCardType)
    (isa ?card2 ?number))

;; *** check for matching symbols
(<== (matchingCards ?card1 ?card2)
    (isa ?card1 ?symbol)
    (isa ?symbol SpecialCardType)
    (isa ?card2 ?symbol))

;; *** check for same color
(<== (matchingCards ?card1 ?card2)
	(sameColor ?card1 ?card2))

;; ************ cardInHandWithColor ***********
;; Method to get cards in hand that are the same color as the top color
(<== (cardInHandWithColor ?color ?card)
    (cardState ?card inHandCard)
    (isa ?card ?color))

;; ************ playableCardValue ***********
;; Method to get the values of all playable cards
;; used to determine highest value card
(<== (playableCardValue ?value ?topCard)
    (playableCards ?card ?topCard)
    (isa ?card NumberCardType)
    (cardValue ?card ?value))

;; ------------------------------------------------------------
;; ----------------------- Basic rules ------------------------
;; ------------------------------------------------------------

;; ************ playableCards ***********
;; Function to return all cards in hand that could be played

;; *** check for playable cards with matching color or number
(<== (playableCards ?card ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardState ?card inHandCard)
    (matchingCards ?card ?topCard))

;; *** check for playable wild cards (can always be played)
;; TODO: store color once its been decided
(<== (playableCards ?card ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardState ?card inHandCard)
    (isa ?card WildTheCard))

;; *** check for playable draw2 cards
;; case when numberCardsToDraw is > 0
(<== (playableCards ?card ?topCard)
    (isa ?topCard Draw2TheCard)
    (cardState ?card inHandCard)
    (isa ?card Draw2TheCard))

;; *** check for playable draw4 cards
;; TODO: store color once its been decided
(<== (playableCards ?playableWildCard ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardColor ?topCard ?topColor)
    (and (evaluate ?cardsMatchingTopColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor ?topColor ?cards))))
        (evaluate ?n-cardsMatchingTopColorInHand (LengthOfListFn ?cardsMatchingTopColorInHand))
        (equals ?n-cardsMatchingTopColorInHand 0)
        (cardState ?playableWildCard inHandCard)
        (isa ?playableWildCard WildDraw4TheCard)))

;; ------------------------------------------------------------
;; ----------------------- Strategic rules --------------------
;; ------------------------------------------------------------

;; ************ highestValuePlayableCard ***********
;; Method to get the playable card with the greatest values
;; could return multiple cards
;; TODO: come up with tie breaker?
(<== (highestValuePlayableCard ?highestValueCard ?topCard)
    (and (evaluate ?playableCardValues
        (SetToListFn
            (TheClosedRetrievalSetOf ?cardValues
                (playableCardValue ?value ?topCard))))
    (evaluate ?greatestValue (MaximumFn ?playableCardValues IdentityFn)))
    (playableCards ?highestValueCard ?topCard)
    (cardValue ?highestValueCard ?greatestValue))
