(in-microtheory UnoPlayer)

;; ------------------------------------------------------------
;; -------------------- Helper functions ----------------------
;; ------------------------------------------------------------

;; ************ cardColor ***********
;; Get the color of a card
(<== (cardColor ?card ?color)
    (isa ?card ?color)
    (isa ?color PlayingCardColor))

;; ************ sameColor ***********
;; Compare two cards to determine if they're the same color
(<== (sameColor ?card1 ?card2)
    (isa ?card1 ?cardColor)
    (isa ?cardColor PlayingCardColor)
    (isa ?card2 ?cardColor))

;; ************ matchingCards ***********
;; Compare two cards to determine if they match symbols or colors

;; check for matching numbers
(<== (matchingCards ?card1 ?card2)
    (isa ?card1 ?number)
    (isa ?number NumberCardType)
    (isa ?card2 ?number))

;; *** check for matching symbols
(<== (matchingCards ?card1 ?card2)
    (isa ?card1 ?symbol)
    (isa ?symbol SpecialCardType)
    (isa ?card2 ?symbol))

;; *** check for same color
(<== (matchingCards ?card1 ?card2)
	(sameColor ?card1 ?card2))

;; ************ cardInHandWithColor ***********
;; Method to get cards in hand that are the same color as the top color
(<== (cardInHandWithColor ?color ?card)
    (cardState ?card inHandCard)
    (isa ?card ?color))

;; ************ playableCardValue ***********
;; Method to get the values of all playable cards
;; used to determine highest value card
(<== (playableCardValue ?value)
    (cardState ?card playableCard)
    (cardValue ?card ?value))

;; ************ countOfMostCommonColorInHand ***********
;; Method to get the count of the color that you have the most of for purpose of wildcards/switching colors
(<== (countOfMostCommonColorInHand ?countOfCardsWithMostFrequentColor)
   	(and (evaluate ?redCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?redCards (cardInHandWithColor RedPlayingCard ?redCards))))
        (evaluate ?n-redCardList
        	(LengthOfListFn ?redCardList)))
	(and (evaluate ?yellowCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?yellowCards (cardInHandWithColor YellowPlayingCard ?yellowCards))))
        (evaluate ?n-yellowCardList
        	(LengthOfListFn ?yellowCardList)))
    (and (evaluate ?greenCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?greenCards (cardInHandWithColor GreenPlayingCard ?greenCards))))
        (evaluate ?n-greenCardList
        	(LengthOfListFn ?greenCardList)))
    (and (evaluate ?blueCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?blueCards (cardInHandWithColor BluePlayingCard ?blueCards))))
        (evaluate ?n-blueCardList
            (LengthOfListFn ?blueCardList)))
    (evaluate ?countOfCardsWithMostFrequentColor 
    	(MaximumFn (TheList ?n-redCardList ?n-yellowCardList ?n-blueCardList ?n-greenCardList) IdentityFn)))

;; ************ mostCommonColorInHand ***********
;; Method to get the color that you have the most of for purpose of wildcards/switching colors

;; *** check if you have the most red cards
(<== (mostCommonColorInHand RedPlayingCard)
    (countOfMostCommonColorInHand ?countOfCardsWithMostFrequentColor)
    (and (evaluate ?redCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?redCards (cardInHandWithColor RedPlayingCard ?redCards))))
        (evaluate ?n-redCardList
            (LengthOfListFn ?redCardList)))
    (equals ?countOfCardsWithMostFrequentColor ?n-redCardList))

;; *** check if you have the most yellow cards
(<== (mostCommonColorInHand YellowPlayingCard)
    (countOfMostCommonColorInHand ?countOfCardsWithMostFrequentColor)
    (and (evaluate ?yellowCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?yellowCards (cardInHandWithColor YellowPlayingCard ?yellowCards))))
        (evaluate ?n-yellowCardList
            (LengthOfListFn ?yellowCardList)))
    (equals ?countOfCardsWithMostFrequentColor ?n-yellowCardList))

;; *** check if you have the most green cards
(<== (mostCommonColorInHand GreenPlayingCard)
    (countOfMostCommonColorInHand ?countOfCardsWithMostFrequentColor)
    (and (evaluate ?greenCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?greenCards (cardInHandWithColor GreenPlayingCard ?greenCards))))
        (evaluate ?n-greenCardList
            (LengthOfListFn ?greenCardList)))
    (equals ?countOfCardsWithMostFrequentColor ?n-greenCardList))

;; *** check if you have the most blue cards
(<== (mostCommonColorInHand BluePlayingCard)
    (countOfMostCommonColorInHand ?countOfCardsWithMostFrequentColor)
    (and (evaluate ?blueCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?blueCards (cardInHandWithColor BluePlayingCard ?blueCards))))
        (evaluate ?n-blueCardList
            (LengthOfListFn ?blueCardList)))
    (equals ?countOfCardsWithMostFrequentColor ?n-blueCardList))

;; ************ playableCardsOfType ***********
;; Returns playable cards of a specific type
(<== (playableCardsOfType ?playableCard ?cardType)
    (cardState ?playableCard playableCard)
    (isa ?playableCard ?cardType))

;; ************ typeIsNotPlayable ***********
;; Function to tell you if you have any cards of a type that you can play
(<== (typeIsNotPlayable ?cardType)
    (evaluate ?playableCardList
        (SetToListFn
            (TheClosedRetrievalSetOf ?playableCard
                (playableCardsOfType ?playableCard ?cardType))))
    (evaluate ?n-playableCardList
        (LengthOfListFn ?playableCardList))
    (equals ?n-playableCardList 0))

;; ************ colorIsInHand ***********
;; Method to get colors that you have in your hand

;; *** check if you have red cards
(<== (colorIsInHand RedPlayingCard)
    (and (evaluate ?cardsMatchingColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor RedPlayingCard ?cards))))
        (evaluate ?n-cardsMatchingColorInHand
            (LengthOfListFn ?cardsMatchingColorInHand))
        (greaterThan ?n-cardsMatchingColorInHand 0)))

;; *** check if you have yellow cards
(<== (colorIsInHands YellowPlayingCard)
    (and (evaluate ?cardsMatchingColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor YellowPlayingCard ?cards))))
        (evaluate ?n-cardsMatchingColorInHand
            (LengthOfListFn ?cardsMatchingColorInHand))
        (greaterThan ?n-cardsMatchingColorInHand 0)))

;; *** check if you have green cards
(<== (colorIsInHand GreenPlayingCard)
    (and (evaluate ?cardsMatchingColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor GreenPlayingCard ?cards))))
        (evaluate ?n-cardsMatchingColorInHand
            (LengthOfListFn ?cardsMatchingColorInHand))
        (greaterThan ?n-cardsMatchingColorInHand 0)))

;; *** check if you have blue cards
(<== (colorIsInHand BluePlayingCard)
    (and (evaluate ?cardsMatchingColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor BluePlayingCard ?cards))))
        (evaluate ?n-cardsMatchingColorInHand
            (LengthOfListFn ?cardsMatchingColorInHand))
        (greaterThan ?n-cardsMatchingColorInHand 0)))

;; ------------------------------------------------------------
;; ----------------------- Basic rules ------------------------
;; ------------------------------------------------------------

;; ************ playableCards ***********
;; Function to return all cards in hand that could be played

;; *** check for playable cards with matching color or number or symbol
(<== (playableCards ?card ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardState ?card inHandCard)
    (matchingCards ?topCard ?card))

;; *** check for playable wild cards (can always be played)
;; TODO: store color once its been decided
(<== (playableCards ?card ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardState ?card inHandCard)
    (isa ?card WildTheCard))

;; *** check for playable draw2 cards
;; case when numberCardsToDraw is > 0
(<== (playableCards ?card ?topCard)
    (isa ?topCard Draw2TheCard)
    (cardState ?card inHandCard)
    (isa ?card Draw2TheCard))

;; *** check for playable draw4 cards
;; TODO: store color once its been decided
(<== (playableCards ?playableWildCard ?topCard)
    (numberCardsToDraw cardsToDraw ?drawCount)
    (equals ?drawCount 0)
    (cardColor ?topCard ?topColor)
    (and (evaluate ?cardsMatchingTopColorInHand
        (SetToListFn
            (TheClosedRetrievalSetOf ?cards (cardInHandWithColor ?topColor ?cards))))
        (evaluate ?n-cardsMatchingTopColorInHand
        	(LengthOfListFn ?cardsMatchingTopColorInHand))
        (equals ?n-cardsMatchingTopColorInHand 0))
    (cardState ?playableWildCard inHandCard)
    (isa ?playableWildCard WildDraw4TheCard))

;; ------------------------------------------------------------
;; ----------------------- Strategic rules --------------------
;; ------------------------------------------------------------

;; ************ highestValuePlayableCard ***********
;; Method to get the playable card with the greatest values
;; could return multiple cards
;; TODO: come up with tie breaker?
(<== (highestValuePlayableCard ?highestValueCard ?topCard)
    (and (evaluate ?playableCardValues
        (SetToListFn
            (TheClosedRetrievalSetOf ?value
                (playableCardValue ?value))))
    	(evaluate ?greatestValue (MaximumFn ?playableCardValues IdentityFn)))
    (cardState ?highestValueCard playableCard)
    (cardValue ?highestValueCard ?greatestValue))

;; ************ pickWildCardColorEarlyGame ***********
;; Method to pick which color to switch to if it is early in the game
;; only considers own preferences
(<== (pickWildCardColorEarlyGame ?color)
	(mostCommonColorInHand ?color))

;; ************ pickWildCardColorLateGame ***********
;; Method to pick which color to switch to if it is early in the game
;; should always pick color that you have
(<== (pickWildCardColorLateGame ?color)
    (colorIsInHand ?color)
    (evaluate ?colorsWinnerIsAvoiding
        (SetToListFn
            (TheClosedRetrievalSetOf ?color
                (winnerIsAvoidingColor ?color)))))